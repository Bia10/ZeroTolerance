<<[glsl_vs]>>
<<[
	#version 330 core
	layout (location = 0) in vec3 position;
	layout (location = 1) in vec2 tex_coord; 
	layout (location = 2) in vec3 normal;
	layout (location = 3) in vec4 color;
	layout (location = 4) in vec4 tangent;
	layout (location = 5) in vec4 bitangent;

	out VS_OUT {
		vec3 frag_pos;
		vec3 normal;
		vec2 tex_coord;
		vec4 color;
		vec4 frag_pos_light_space;
		mat3 tbn;
	} vs_out;

	uniform mat4 model;
	uniform mat4 projection;
	uniform mat4 view;
	uniform mat4 light_matrix;

	void main()
	{
		gl_Position = projection * view * model * vec4(position, 1.0);
		vs_out.frag_pos = vec3(model * vec4(position, 1.0));
		vs_out.normal = normalize(transpose(inverse(mat3(model))) * normal);
		vs_out.tex_coord = tex_coord;
		vs_out.color = color;
		vs_out.frag_pos_light_space = light_matrix * vec4(vs_out.frag_pos, 1.0);
		
		vec3 t = normalize(vec3(model * tangent));
		vec3 b = normalize(vec3(model * bitangent));
		vec3 n = normalize(vec3(model * vec4(normal, 0)));
		vs_out.tbn = mat3(t, b, n);
	}
]>>

<<[glsl_fs]>>
<<[
	#version 330 core
	out vec4 frag_color;

	in VS_OUT {
		vec3 frag_pos;
		vec3 normal;
		vec2 tex_coord;
		vec4 color;
		vec4 frag_pos_light_space;
		mat3 tbn;
	} fs_in;

	uniform sampler2D diffuse_tex;
	uniform sampler2D specular_tex;
	uniform sampler2D normal_tex;
	uniform sampler2D shadowmap_directional_tex;
	uniform vec4 diffuse_color;
	uniform vec4 specular_color;
	uniform float shininess;
	
	uniform vec3 view_pos;

	uniform vec3 light_pos;
	uniform float light_ambient;
	uniform float light_intensity;
	uniform vec4 light_color;
	
	struct PointLight
	{
		vec3 pos;
		
		float intensity;

		vec3 ambient_color;
		vec3 diffuse_color;
		vec3 specular_color;
	};
	
	#define MAX_POINT_LIGHTS 4

	uniform PointLight point_lights[MAX_POINT_LIGHTS];
	uniform int point_lights_count;
	
	vec3 normalCalculation()
	{
		vec3 normal = texture(normal_tex, fs_in.tex_coord).rgb;
		if(normal.x == 1 && normal.y == 1 && normal.z == 1) {
			return fs_in.normal;
		}
		normal = normalize(normal * 2.0 - 1.0);
		normal = normalize(fs_in.tbn * normal);
		return normal;
	}
	
	float shadowCalculation(vec3 light_dir, vec3 normal)
	{
		vec3 proj_coords = fs_in.frag_pos_light_space.xyz / fs_in.frag_pos_light_space.w;
		proj_coords = proj_coords * 0.5 + 0.5;
		
		float current_depth = proj_coords.z;
		
		float bias = 0;//max(0.05 * (1.0 - dot(normal, light_dir)), 0.005);
		
		float shadow = 0.0;
		vec2 texel_size = 1.0 / textureSize(shadowmap_directional_tex, 0);
		
		const int samples = 3;
		for(int x = -samples; x <= samples; ++x) {
			for(int y = -samples; y <= samples; ++y) {
				float pcf_depth = texture(shadowmap_directional_tex, proj_coords.xy + vec2(x, y) * texel_size).r;
				shadow += current_depth - bias > pcf_depth ? 1.0 : 0.0f;
			}
		}
		shadow /= (samples * 2 + 1) * (samples * 2 + 1);
		return shadow;
	}
	
	float specularCalculation(vec3 light_dir, vec3 normal, vec3 view_dir)
	{
		vec3 halfway_dir = normalize(light_dir + view_dir);
		float spec_value = texture(specular_tex, fs_in.tex_coord).r;
		return pow(max(dot(normal, halfway_dir), 0.0), 256.0) * shininess * 5 * spec_value;
	}
	
	vec4 directionalLightCalculation(vec4 clr, vec3 normal, vec3 view_dir)
	{
		vec4 light_clr = light_color * light_intensity;
        
		vec3 light_dir = normalize(light_pos - fs_in.frag_pos);
		float diff = max(dot(light_dir, normal), 0.0);
		vec4 diffuse = diff * light_clr;
     
		vec4 specular = specularCalculation(light_dir, normal, view_dir) * light_clr * specular_color;
		float shadow = shadowCalculation(light_dir, normal);

		vec4 ambient_clr = clr * light_ambient;
		return (ambient_clr + (1.0 - shadow) * (diffuse + specular)) * clr;
	}
	
	vec4 pointLightCalculation(vec4 clr, vec3 normal, vec3 view_dir, PointLight light)
	{
		vec4 light_clr = vec4(light.ambient_color, 1);
        
		vec3 light_dir = normalize(light.pos - fs_in.frag_pos);
		float diff = max(dot(light_dir, normal), 0.0);
		vec4 diffuse = diff * light_clr;
     
		vec4 specular = specularCalculation(light_dir, normal, view_dir) * light_clr;// * specular_color;
		float shadow = 0;//shadowCalculation(light_dir, normal);

		float distance    = length(light.pos - fs_in.frag_pos);
		float constant = 1;
		float linear = 0.7 - (.693 * light.intensity);
		float quadratic = 1.8 - (1.7998 * light.intensity);
		float attenuation = 1.0 * light.intensity;
		
		return ((1.0 - shadow) * (diffuse + specular)) * clr * attenuation;
	}
	
	void main()
	{
		vec4 clr = texture(diffuse_tex, fs_in.tex_coord) * fs_in.color * diffuse_color;
		vec3 normal = normalCalculation();
		vec3 view_dir = normalize(view_pos - fs_in.frag_pos);
		vec4 lighting = directionalLightCalculation(clr, normal, view_dir);
		
		for(int i = 0; i < point_lights_count; ++i) {
			lighting += pointLightCalculation(clr, normal, view_dir, point_lights[i]);
		}
        
		frag_color = vec4(lighting.xyz, 1);
	};
]>>

<<[hlsl_vs, vertexShader]>>
<<[
	cbuffer MatrixBuffer : register(b0)
	{
		matrix model;
		matrix view;
		matrix projection;
		matrix light_matrix;
		float3 light_pos;
		float3 view_pos;
	};

	struct VertexInputType
	{
		float3 position : POSITION;
		float2 tex_coord : TEXCOORD0;
		float3 normal : NORMAL;
		float4 color : COLOR;
		float4 tangent : TANGENT;
		float4 bitangent : BINORMAL;
	};

	struct FragmentInputType
	{
		float4 position : SV_POSITION;
		float3 normal : NORMAL0;
		float2 tex_coord : TEXCOORD0;
		float4 color : COLOR0;
		float4 frag_pos : POSITION0;
		float4 frag_pos_light_space : POSITION1;
		float4 light_pos : POSITION2;
		float4 view_pos : POSITION3;
		float3 tbn_t : NORMAL1;
		float3 tbn_b : NORMAL2;
		float3 tbn_n : NORMAL3;
	};


	FragmentInputType vertexShader(VertexInputType input)
	{
		FragmentInputType output;
		float4 position4 = float4(input.position, 1);
		output.position = mul(position4, model);
		output.position = mul(output.position, view);
		output.position = mul(output.position, projection);
		
		output.tex_coord = input.tex_coord;
		output.color = input.color;
		output.frag_pos = float4(mul(position4, model).xyz, 1);
		output.frag_pos_light_space = mul(output.frag_pos, light_matrix);

		output.normal = normalize(mul(input.normal, transpose((float3x3)model)));

		output.light_pos = float4(light_pos, 1);
		output.view_pos = float4(view_pos, 1);
		
		output.tbn_t = normalize(mul(model, input.tangent)).xyz;
		output.tbn_b = normalize(mul(model, input.bitangent)).xyz;
		output.tbn_n = normalize(mul(model, float4(input.normal, 0))).xyz;
		
		return output;
	}
]>>

<<[hlsl_fs, fragmentShader]>>
<<[
	struct FragmentInputType
	{
		float4 position : SV_POSITION;
		float3 normal : NORMAL0;
		float2 tex_coord : TEXCOORD0;
		float4 color : COLOR0;
		float4 frag_pos : POSITION0;
		float4 frag_pos_light_space : POSITION1;
		float4 light_pos : POSITION2;
		float4 view_pos : POSITION3;
		float3 tbn_t : NORMAL1;
		float3 tbn_b : NORMAL2;
		float3 tbn_n : NORMAL3;
	};

	struct PointLight
	{
		float3 pos;
		
		float intensity;

		float3 ambient_color;
		float3 diffuse_color;
		float3 specular_color;
	};
	
	#define MAX_POINT_LIGHTS 4

	Texture2D diffuse_tex;
	Texture2D specular_tex;
	Texture2D normal_tex;
	Texture2D shadowmap_directional_tex;
	SamplerState sample_type;

	cbuffer VariableBuffer : register(b0)
	{
		float4 diffuse_color;
		float4 specular_color;
		float  shininess;
		float  light_ambient;
		float  light_intensity;
		float4 light_color;
		int point_lights_count;
		PointLight point_lights[MAX_POINT_LIGHTS];
	};


	float3 normalCalculation(FragmentInputType input)
	{
		float3 normal = normal_tex.Sample(sample_type, input.tex_coord).rgb;
		if(normal.x == 1 && normal.y == 1 && normal.z == 1) {
			return input.normal;
		}

		float3x3 tbn = transpose(float3x3(input.tbn_t, input.tbn_b, input.tbn_n));
		normal = normalize(mul(normal, 2.0) - float3(1.0, 1.0, 1.0));
		normal = normalize(mul(tbn, normal));
		return normal;
	}

	float shadowCalculation(FragmentInputType input, float3 light_dir, float3 normal)
	{
		float3 proj_coords = input.frag_pos_light_space.xyz / input.frag_pos_light_space.w;
		proj_coords = proj_coords * 0.5 + 0.5;
		proj_coords.y = 1 - proj_coords.y;		
		
		float current_depth = input.frag_pos_light_space.z;
		float bias = max(0.05 * (1.0 - dot(normal, light_dir)), 0.005);
		
		float shadow = 0.0;
		uint tex_w = 0, tex_h = 0;
		shadowmap_directional_tex.GetDimensions(tex_w, tex_h);
		float2 texel_size = 1.0 / float2(tex_w, tex_h);
		
		const int samples = 3;
		for(int x = -samples; x <= samples; ++x) {
			for(int y = -samples; y <= samples; ++y) {
				float pcf_depth = shadowmap_directional_tex.Sample(sample_type, proj_coords.xy + float2(x, y) * texel_size).r;
				shadow += current_depth - bias > pcf_depth ? 1: 0.0f;
			}
		}
		shadow /= (samples * 2 + 1) * (samples * 2 + 1);
		return shadow;
	}
	
	float specularCalculation(FragmentInputType input, float3 light_dir, float3 normal, float3 view_dir)
	{
		float3 halfway_dir = normalize(light_dir + view_dir);
		float spec_value = specular_tex.Sample(sample_type, input.tex_coord).r;
		float spec = pow(max(dot(normal, halfway_dir), 0.0), 256.0) * shininess * 5 * spec_value;
		return spec;
	}
	
	float4 directionalLightCalculation(FragmentInputType input, float4 clr, float3 normal, float3 view_dir)
	{
		float4 light_clr = light_color * light_intensity;
		
		float3 light_dir = normalize(input.light_pos - input.frag_pos).xyz;
		float diff = max(dot(light_dir, normal), 0);
		float4 diffuse = diff * light_clr;
		
		float4 specular = specularCalculation(input, light_dir, normal, view_dir) * light_clr * specular_color;
		float shadow = shadowCalculation(input, light_dir, normal);
		
		float4 ambient_clr = clr * light_ambient;
		return (ambient_clr + (1.0 - shadow) * (diffuse + specular)) * clr;
	}

	float4 pointLightCalculation(FragmentInputType input, float4 clr, float3 normal, float3 view_dir, PointLight light)
	{
		float4 light_clr = float4(light.ambient_color, 1);
        
		float3 light_dir = normalize(light.pos - input.frag_pos.xyz);
		float diff = max(dot(light_dir, normal), 0.0);
		float4 diffuse = diff * light_clr;
		
		float4 specular = specularCalculation(input, light_dir, normal, view_dir) * light_clr;// * specular_color;
		float shadow = 0;//shadowCalculation(light_dir, normal);

		float attenuation = 1.0 * light.intensity;
		
		return ((1.0 - shadow) * (diffuse + specular)) * clr * attenuation;
	}

	float4 fragmentShader(FragmentInputType input) : SV_TARGET
	{
		float4 clr = diffuse_tex.Sample(sample_type, input.tex_coord) * input.color * diffuse_color;
		float3 normal = normalCalculation(input);
		float3 view_dir = normalize(input.view_pos - input.frag_pos).xyz;
		float4 lighting = directionalLightCalculation(input, clr, normal, view_dir);
		
		for(int i = 0; i < point_lights_count; ++i) {
			lighting += pointLightCalculation(input, clr, normal, view_dir, point_lights[i]);
		}

		return float4(lighting.xyz, 1);
	}
]>>