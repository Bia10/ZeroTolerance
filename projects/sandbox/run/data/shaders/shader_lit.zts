Anything outside of < < [ ] > > will be ignored

<<[glsl_vs]>>
<<[
	#version 330 core
	layout (location = 0) in vec3 position;
	layout (location = 1) in vec2 tex_coord; 
	layout (location = 2) in vec3 normal;
	layout (location = 3) in vec4 color;

	out VS_OUT {
		vec3 frag_pos;
		vec3 normal;
		vec2 tex_coord;
		vec4 color;
		vec4 frag_pos_light_space;
	} vs_out;

	uniform mat4 model;
	uniform mat4 projection;
	uniform mat4 view;
	uniform mat4 light_matrix;

	void main()
	{
		gl_Position = projection * view * model * vec4(position, 1.0);
		vs_out.frag_pos = vec3(model * vec4(position, 1.0));
		vs_out.normal = transpose(inverse(mat3(model))) * normal;
		vs_out.tex_coord = tex_coord;
		vs_out.color = color;
		vs_out.frag_pos_light_space = light_matrix * vec4(vs_out.frag_pos, 1.0);
	}
]>>

<<[glsl_fs]>>
<<[
	#version 330 core
	out vec4 frag_color;

	in VS_OUT {
		vec3 frag_pos;
		vec3 normal;
		vec2 tex_coord;
		vec4 color;
		vec4 frag_pos_light_space;
	} fs_in;

	uniform sampler2D tex_diffuse;
	uniform vec3 light_pos;

	void main()
	{
		vec3 clr = texture(tex_diffuse, fs_in.tex_coord).rgb * fs_in.color.rgb;
		vec3 normal = normalize(fs_in.normal);
		vec3 light_color = vec3(1);
        
		vec3 ambient = 0.75 * clr;
		vec3 light_dir = normalize(light_pos - fs_in.frag_pos);
		float diff = max(dot(light_dir, normal), 0.0);
		vec3 diffuse = diff * light_color;
        
		//vec3 view_dir = normalize(view_pos - fs_in.frag_pos);
		//float spec = 0.0;
		//vec3 halfway_dir = normalize(light_dir + view_dir);
		//spec = pow(max(dot(normal, halfway_dir), 0.0), 64.0);
		vec3 specular = vec3(0,0,0);//spec * light_color;
        
		vec3 proj_coords = fs_in.frag_pos_light_space.xyz / fs_in.frag_pos_light_space.w;
		proj_coords = proj_coords * 0.5 + 0.5;
		float shadow = 0;
		//if(proj_coords.z <= 1.0) {
		//	float bias = 0.00;//025;
		//	float current_depth = proj_coords.z;
		//	vec2 texel_size = 1.0 / textureSize(tex_shadow_map, 0);
		//	const int samples = 3;
		//	for(int x = -samples; x <= samples; ++x) {
		//		for(int y = -samples; y <= samples; ++y) {
		//			float closest_depth = texture(tex_shadow_map, proj_coords.xy + vec2(x,y) * texel_size).r;
		//			shadow += current_depth - bias > closest_depth ? 1.0 : 0.0f;
		//		}
		//	}
		//	shadow /= (samples * 2 + 1) * (samples * 2 + 1);
		//}
		vec3 lighting = (ambient + (1.0 - shadow) * (diffuse + specular)) * clr;
        
		frag_color = vec4(lighting, 1.0f);// * color;
	};
]>>

<<[hlsl_vs, vertexShader]>>
<<[
	cbuffer MatrixBuffer : register(b0)
	{
		matrix model;
		matrix view;
		matrix projection;
		matrix light_matrix;
		float3 light_pos;
	};

	struct VertexInputType
	{
		float3 position : POSITION;
		float2 tex_coord : TEXCOORD0;
		float3 normal : NORMAL;
		float4 color : COLOR;
	};

	struct FragmentInputType
	{
		float4 position : SV_POSITION;
		float3 normal : NORMAL;
		float2 tex_coord : TEXCOORD0;
		float4 color : COLOR0;
		float4 frag_pos_light_space : POSITION0;
		float4 light_pos : POSITION1;
	};


	FragmentInputType vertexShader(VertexInputType input)
	{
		FragmentInputType output;
		float4 position4 = float4(input.position, 1);
		output.position = mul(position4, model);
		output.position = mul(output.position, view);
		output.position = mul(output.position, projection);
		
		output.tex_coord = input.tex_coord;
		output.color = input.color;
		output.frag_pos_light_space = mul(light_matrix, output.position);
		output.normal = input.normal;
		output.light_pos = float4(light_pos, 1);
		
		return output;
	}
]>>

<<[hlsl_fs, fragmentShader]>>
<<[
	Texture2D tex_diffuse;
	SamplerState sample_type;

	struct FragmentInputType
	{
		float4 position : SV_POSITION;
		float3 normal : NORMAL;
		float2 tex_coord : TEXCOORD0;
		float4 color : COLOR0;
		float4 frag_pos_light_space : POSITION0;
		float4 light_pos : POSITION1;
	};


	float4 fragmentShader(FragmentInputType input) : SV_TARGET
	{
		float4 color = tex_diffuse.Sample(sample_type, input.tex_coord) * input.color;
		float3 normal = normalize(input.normal);
		float3 light_color = float3(.5,1,.5);
		
		float3 ambient = color.xyz * 0.75;
		float3 light_dir = input.light_pos.xyz;//normalize(input.light_pos.xyz - input.position.xyz);
		float diff = max(dot(light_dir, normal), 0);
		float3 diffuse = diff * light_color;
		
		float3 specular = float3(0,0,0);
		
		float3 proj_coords = input.frag_pos_light_space.xyz / input.frag_pos_light_space.w;
		proj_coords = proj_coords * 0.5 + 0.5;
		float shadow = 0;
		
		float3 lighting = (ambient + (1.0 - shadow) * (diffuse + specular)) * color.xyz;
		
		return float4(lighting, 1.0f);
	}
]>>
