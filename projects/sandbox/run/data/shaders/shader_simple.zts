Anything outside of < < [ ] > > will be ignored

<<[glsl_vs]>>
<<[
	#version 330 core
	layout (location = 0) in vec3 position;
	layout (location = 1) in vec2 tex_coord; 
	layout (location = 2) in vec3 normal;
	layout (location = 3) in vec4 color;

	out VS_OUT {
		vec3 frag_pos;
		vec3 normal;
		vec2 tex_coord;
		vec4 color;
	} vs_out;

	uniform mat4 model;
	uniform mat4 projection;
	uniform mat4 view;

	void main()
	{
		gl_Position = projection * view * model * vec4(position, 1.0);
		//gl_Position = vec4(position, 1);
		//vs_out.frag_pos = vec3(model * vec4(position, 1.0));
		vs_out.tex_coord = tex_coord;
		vs_out.color = color;
	}
]>>

<<[glsl_fs]>>
<<[
	#version 330 core
	out vec4 frag_color;

	in VS_OUT {
		vec3 frag_pos;
		vec3 normal;
		vec2 tex_coord;
		vec4 color;
	} fs_in;

	uniform sampler2D tex_diffuse;

	void main()
	{
		vec4 clr = texture(tex_diffuse, fs_in.tex_coord) * fs_in.color;
		frag_color = clr;
	};
]>>

<<[hlsl_vs, vertexShader]>>
<<[
	cbuffer MatrixBuffer : register(b0)
	{
		matrix model;
		matrix view;
		matrix projection;
	};

	struct VertexInputType
	{
		float3 position : POSITION;
		float2 tex_coord : TEXCOORD0;
		float3 normal : NORMAL;
		float4 color : COLOR;
	};

	struct FragmentInputType
	{
		float4 position : SV_POSITION;
		float2 tex_coord : TEXCOORD0;
		float4 color : COLOR0;
	};


	FragmentInputType vertexShader(VertexInputType input)
	{
		FragmentInputType output;
		float4 position4 = float4(input.position, 1);
		output.position = mul(position4, model);
		output.position = mul(output.position, view);
		output.position = mul(output.position, projection);
		
		output.tex_coord = input.tex_coord;
		output.color = input.color;
		
		return output;
	}
]>>

<<[hlsl_fs, fragmentShader]>>
<<[
	Texture2D tex_diffuse;
	SamplerState sample_type;

	struct FragmentInputType
	{
		float4 position : SV_POSITION;
		float2 tex_coord : TEXCOORD0;
		float4 color : COLOR0;
	};


	float4 fragmentShader(FragmentInputType input) : SV_TARGET
	{
		float4 color = tex_diffuse.Sample(sample_type, input.tex_coord) * input.color;
		return color;
	}
]>>
