// shader-unlit

struct VertexInput
{
	vec3 position : 0;
	vec2 uv : 1;
	vec3 normal : 2;
	vec4 color : 3;
}

struct PixelInput
{
	vec4 position : position;
	vec3 normal;
	vec2 uv;
	vec4 color;
}

struct PixelOutput
{
	vec4 color : color;
}

struct Textures
{
	texture2d diffuse_tex;
}

struct Uniforms
{
	mat4 model;
	mat4 view;
	mat4 projection;
}

program DefaultUnlit
{
	vertex_shader vertexShader(VertexInput input : input, Uniforms uniforms : uniforms, PixelInput output : output)
	{
		output.position = uniforms.projection * uniforms.view * uniforms.model * vec4(input.position, 1.0);
		output.uv = input.uv;
		output.color = input.color;
	}

	pixel_shader pixelShader(PixelInput input : input, Uniforms uniforms : uniforms, Textures textures : textures, PixelOutput output : output)
	{
		output.color = textureSample(textures.diffuse_tex, input.uv) * input.color;
	}
}
